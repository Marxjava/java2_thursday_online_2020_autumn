
@RunWith(MockitoJUnitRunner.class)
public class AddBookServiceTest {

	@Mock private Database database;
	@Mock private AddBookRequestValidator validator;
	@InjectMocks private AddBookService service;

	@Test
	public void shouldReturnResponseWithErrorsWhenValidationFails() {
		AddBookRequest request = new AddBookRequest(null, "Author");
		List<CoreError> errors = new ArrayList<>();
		errors.add(new CoreError("title", "Must not be empty!"));
		Mockito.when(validator.validate(request)).thenReturn(errors);

		AddBookResponse response = service.execute(request);
		assertTrue(response.hasErrors());
		assertEquals(response.getErrors().size(), 1);
		assertEquals(response.getErrors().get(0).getField(), "title");
		assertEquals(response.getErrors().get(0).getMessage(), "Must not be empty!");

		Mockito.verifyNoInteractions(database);
	}

	@Test
	public void shouldAddBookToDatabase() {
		Mockito.when(validator.validate(any())).thenReturn(new ArrayList<>());
		AddBookRequest request = new AddBookRequest("Title", "Author");
		AddBookResponse response = service.execute(request);
		assertFalse(response.hasErrors());
		Mockito.verify(database).save(
				argThat(new BookMatcher("Title", "Author")));
	}

}